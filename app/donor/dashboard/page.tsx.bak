"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import Link from "next/link"
import {
  Home,
  CreditCard,
  Heart,
  User,
  LogOut,
  Menu,
  X,
  Search,
  Filter,
  Bookmark,
  MessageSquare,
  Star,
  PawPrint,
  Clock,
  ChevronDown,
  ExternalLink,
  CheckCircle,
  Loader2,
  AlertCircle,
  AlertTriangle,
  MapPin,
  Plus,
  ChevronLeft,
  ChevronRight,
} from "lucide-react"
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from "recharts"
import ConnectWalletButton from "@/components/ConnectWalletButton"
import CaseCard from "@/components/CaseCard"
import DonationModal from "@/components/DonationModal"
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle 
} from "@/components/ui/dialog"

const COLORS = ["#8b5cf6", "#6366f1", "#ec4899", "#10b981", "#f59e0b", "#ef4444"]

interface UserProfile {
  name: string;
  email: string;
  bio?: string;
  phone?: string;
  address?: string;
  socialLinks?: {
    twitter?: string;
    linkedin?: string;
    facebook?: string;
    telegram?: string;
  };
}

interface Case {
  _id: string;
  title: string;
  description: string;
  targetAmount: string;
  amountRaised: string;
  imageUrl: string;
  welfare: string;
  category: string;
  status: string;
  createdAt: string;
}

interface DonationData {
  amount: string;
  txHash?: string;
}

interface DonationHistory {
  id: string;
  welfare: string;
  case: string;
  amount: string;
  amountUsd: string;
  date: string;
  status: string;
  txHash: string;
}

interface SavedWelfare {
  id: string;
  name: string;
  description: string;
  image: string;
}

interface Message {
  id: string;
  welfare: string;
  title: string;
  message: string;
  date: string;
  image: string;
}

interface SuccessStory {
  id: string;
  title: string;
  description: string;
  image: string;
  welfare?: string;
}

interface Emergency {
  _id: string;
  animalType: string;
  condition: string;
  location: string;
  description: string;
  status: string;
  createdAt: string;
  images?: string[];
}

interface Adoption {
  _id: string;
  name: string;
  type: string;
  breed: string;
  age: string;
  gender: string;
  size: string;
  description: string;
  images: string[];
  location: string;
  health: string;
  behavior: string;
  status: string;
  postedBy: string;
  adoptedBy?: string;
  createdAt: string;
}

export default function DonorDashboard() {
  const router = useRouter()
  const [activeTab, setActiveTab] = useState("overview")
  const [cases, setCases] = useState<Case[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [selectedCase, setSelectedCase] = useState<Case | null>(null)
  const [showDonationModal, setShowDonationModal] = useState(false)
  const [walletConnected, setWalletConnected] = useState(false)
  const [walletAddress, setWalletAddress] = useState("")
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [filterOpen, setFilterOpen] = useState(false)
  const [selectedFilters, setSelectedFilters] = useState({
    category: "all",
    status: "all",
    dateRange: "all",
  })
  const [donationHistory, setDonationHistory] = useState<DonationHistory[]>([])
  const [savedWelfares, setSavedWelfares] = useState<SavedWelfare[]>([])
  const [allWelfares, setAllWelfares] = useState<SavedWelfare[]>([])
  const [isSavingWelfare, setIsSavingWelfare] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [successStories, setSuccessStories] = useState<SuccessStory[]>([])
  const [donationStats, setDonationStats] = useState({
    totalDonated: 0,
    casesSupported: 0,
    welfaresSupported: 0,
    monthlyChange: {
      donations: 0,
      cases: 0,
      welfares: 0
    },
    byWelfare: [] as { name: string; value: number }[],
    byCategory: [] as { name: string; value: number }[]
  })
  const [emergencies, setEmergencies] = useState<Emergency[]>([])
  const [selectedEmergency, setSelectedEmergency] = useState<Emergency | null>(null)
  const [viewEmergencyDialogOpen, setViewEmergencyDialogOpen] = useState(false)
  const [emergencyAssignedWelfare, setEmergencyAssignedWelfare] = useState<SavedWelfare | null>(null)
  const [adoptions, setAdoptions] = useState<Adoption[]>([])
  const [showAddAdoption, setShowAddAdoption] = useState(false)
  const [newAdoption, setNewAdoption] = useState({
    name: "",
    type: "",
    breed: "",
    age: "",
    gender: "",
    size: "",
    description: "",
    images: [] as File[],
    location: "",
    health: "",
    behavior: "",
  })
  const [adoptionImagePreviews, setAdoptionImagePreviews] = useState<string[]>([])
  const [donationData, setDonationData] = useState<DonationData | null>(null)

  // Fetch cases from API
  useEffect(() => {
    const fetchCases = async () => {
      try {
        setLoading(true)

        // Check if we're in the browser environment
        if (typeof window !== "undefined") {
          const token = localStorage.getItem("donorToken")
          if (!token) {
            router.push("/login")
            return
          }
          
          // Fetch cases from API
          const response = await fetch("http://localhost:5001/api/auth/cases/all", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })

          if (!response.ok) {
            throw new Error("Failed to fetch cases")
          }

          const data = await response.json()
          
          // Transform the data to match our Case interface
          const transformedCases = data.map((caseItem: any) => ({
            _id: caseItem._id,
            title: caseItem.title,
            description: caseItem.description,
            targetAmount: caseItem.targetAmount.toString(),
            amountRaised: caseItem.amountRaised ? caseItem.amountRaised.toString() : "0",
            imageUrl: caseItem.imageUrl && caseItem.imageUrl.length > 0 ? caseItem.imageUrl[0] : "/images/placeholder.jpg",
            welfare: caseItem.createdBy ? caseItem.createdBy.name || "Unknown Welfare" : "Unknown Welfare",
            category: caseItem.medicalIssue || "General",
            status: caseItem.status || "Active",
            createdAt: new Date(caseItem.createdAt).toISOString().split('T')[0]
          }))
          
          setCases(transformedCases)
        }
        setLoading(false)
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Failed to fetch cases"
        console.error("Error fetching cases:", errorMessage)
        setError(errorMessage)
        setLoading(false)
      }
    }

    fetchCases()
  }, [router])

  // Fetch user profile
  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        if (typeof window !== "undefined") {
          const token = localStorage.getItem("donorToken")
          if (!token) {
            router.push("/login")
            return
          }
          
          // Fetch user profile from API
          const response = await fetch("http://localhost:5001/api/auth/profile", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })

          if (!response.ok) {
            throw new Error("Failed to fetch profile")
          }

          const data = await response.json()
          
          // Transform the data to match our UserProfile interface
          const profile: UserProfile = {
            name: data.name || "Anonymous Donor",
            email: data.email || "",
            bio: data.bio || "",
            phone: data.phone || "",
            address: data.address || "",
            socialLinks: {
              twitter: data.socialLinks?.twitter || "",
              linkedin: data.socialLinks?.linkedin || "",
              facebook: data.socialLinks?.facebook || "",
              telegram: data.socialLinks?.telegram || ""
            }
          }
          
          setUserProfile(profile)
        }
      } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred"
        console.error("Error fetching profile:", errorMessage)
      }
    }

    fetchUserProfile()
  }, [router])

  // Fetch donation stats
  useEffect(() => {
    const fetchDonationStats = async () => {
      try {
        if (typeof window !== "undefined") {
          const token = localStorage.getItem("donorToken")
          if (!token) return
          
          const response = await fetch("http://localhost:5001/api/donor/donations/stats", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
          
          if (!response.ok) {
            throw new Error("Failed to fetch donation stats")
          }
          
          const data = await response.json()
          setDonationStats(data)
        }
      } catch (error) {
        console.error("Error fetching donation stats:", error)
      }
    }
    
    fetchDonationStats()
  }, [])

  // Fetch donation history
  useEffect(() => {
    const fetchDonationHistory = async () => {
      try {
        if (typeof window !== "undefined" && activeTab === "donations") {
          const token = localStorage.getItem("donorToken")
          if (!token) return
          
          const response = await fetch("http://localhost:5001/api/donor/donations/history", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
          
          if (!response.ok) {
            throw new Error("Failed to fetch donation history")
          }
          
          const data = await response.json()
          
          // Transform the data to match our DonationHistory interface
          const transformedHistory = data.map((donation: any) => ({
            id: donation._id,
            welfare: donation.welfare.name,
            case: donation.case.title,
            amount: donation.amount.toString(),
            amountUsd: donation.amountUsd.toString(),
            date: new Date(donation.createdAt).toLocaleDateString(),
            status: donation.status,
            txHash: donation.txHash
          }))
          
          setDonationHistory(transformedHistory)
        }
      } catch (error) {
        console.error("Error fetching donation history:", error)
      }
    }
    
    fetchDonationHistory()
  }, [activeTab])

  // Fetch saved welfares
  useEffect(() => {
    const fetchSavedWelfares = async () => {
      try {
        if (typeof window !== "undefined" && activeTab === "saved") {
          const token = localStorage.getItem("donorToken")
          if (!token) return
          
          const response = await fetch("http://localhost:5001/api/donor/saved-welfares", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
          
          if (!response.ok) {
            throw new Error("Failed to fetch saved welfares")
          }
          
          const data = await response.json()
          
          // Transform the data to match our SavedWelfare interface
          const transformedWelfares = data.map((welfare: any) => ({
            id: welfare._id,
            name: welfare.name,
            description: welfare.description,
            image: welfare.profileImage && welfare.profileImage.startsWith('/') 
              ? `http://localhost:5001${welfare.profileImage}` 
              : welfare.profileImage || "/images/placeholder.jpg"
          }))
          
          setSavedWelfares(transformedWelfares)
        }
      } catch (error) {
        console.error("Error fetching saved welfares:", error)
      }
    }
    
    fetchSavedWelfares()
  }, [activeTab])

  // Fetch messages
  useEffect(() => {
    const fetchMessages = async () => {
      try {
        if (typeof window !== "undefined" && activeTab === "messages") {
          const token = localStorage.getItem("donorToken")
          if (!token) return
          
          const response = await fetch("http://localhost:5001/api/donor/messages", {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
          
          if (!response.ok) {
            throw new Error("Failed to fetch messages")
          }
          
          const data = await response.json()
          
          // Transform the data to match our Message interface
          const transformedMessages = data.map((msg: any) => ({
            id: msg._id,
            welfare: msg.from.name,
            title: msg.title,
            message: msg.content,
            date: new Date(msg.createdAt).toLocaleDateString(),
            image: msg.from.profileImage || "/images/placeholder.jpg"
          }))
          
          setMessages(transformedMessages)
        }
      } catch (error) {
        console.error("Error fetching messages:", error)
      }
    }
    
    fetchMessages()
  }, [activeTab])

  // Fetch success stories
  useEffect(() => {
    const fetchSuccessStories = async () => {
      try {
        if (typeof window !== "undefined" && activeTab === "stories") {
          const response = await fetch("http://localhost:5001/api/welfare/public/success-stories")
          
          if (!response.ok) {
            throw new Error("Failed to fetch success stories")
          }
          
          const data = await response.json()
          
          // Transform the data to match our SuccessStory interface
          const transformedStories = data.successStories.map((story: any) => ({
            id: story._id,
            title: story.title,
            description: story.content,
            image: story.imageUrl && story.imageUrl.length > 0 
              ? `http://localhost:5001/uploads/${story.imageUrl[0]}`
              : "/images/placeholder.jpg",
            welfare: story.postedBy.name
          }))
          
          setSuccessStories(transformedStories)
        }
      } catch (error) {
        console.error("Error fetching success stories:", error)
      }
    }
    
    fetchSuccessStories()
  }, [activeTab])

  // Add this useEffect to fetch all welfares
  useEffect(() => {
    const fetchAllWelfares = async () => {
      try {
        // Only fetch all welfares when the saved tab is active
        if (activeTab !== "saved") return
        
        if (typeof window !== "undefined") {
          // We don't need a token for the public endpoint
          // Fetch all approved welfares from API with the correct endpoint
          const response = await fetch("http://localhost:5001/api/welfare/public/approved")

          if (!response.ok) {
            throw new Error("Failed to fetch approved welfares")
          }

          const data = await response.json()
          
          // Transform the data to match our SavedWelfare interface
          const transformedWelfares = data.map((welfare: any) => ({
            id: welfare._id,
            name: welfare.name,
            description: welfare.description || "No description provided",
            image: welfare.profilePicture ? `http://localhost:5001${welfare.profilePicture}` : "/images/placeholder.jpg"
          }))
          
          // Filter out welfares that are already saved
          const savedWelfareIds = savedWelfares.map((w: SavedWelfare) => w.id)
          const unsavedWelfares = transformedWelfares.filter((w: any) => !savedWelfareIds.includes(w.id))
          
          setAllWelfares(unsavedWelfares)
        }
      } catch (error) {
        console.error("Error fetching approved welfares:", error)
      }
    }

    fetchAllWelfares()
  }, [activeTab, savedWelfares])

  // Above the handleWalletConnect function, add a useEffect to check if endpoints exist
  useEffect(() => {
    // Check if the backend API is available
    const checkApi = async () => {
      try {
        const response = await fetch("http://localhost:5001/api/health-check");
        if (!response.ok) {
          console.warn("Backend API may not be available. Some features may not work correctly.");
        }
      } catch (error) {
        console.warn("Backend API connection failed. Using fallback data where needed.");
      }
    };
    
    checkApi();
  }, []);

  // Fetch emergency reports
  useEffect(() => {
    const fetchEmergencies = async () => {
      try {
        if (typeof window !== "undefined" && activeTab === "emergencies") {
          // No need for token for public endpoint
          const response = await fetch("http://localhost:5001/api/emergency/public");

          if (!response.ok) {
            throw new Error("Failed to fetch emergency reports");
          }

          const data = await response.json();
          console.log("Fetched emergency data:", data);
          setEmergencies(data);
        }
      } catch (error) {
        console.error("Error fetching emergency reports:", error);
      }
    };
    
    fetchEmergencies();
  }, [activeTab, router]);

  const handleWalletConnect = (address: string) => {
    setWalletConnected(true)
    setWalletAddress(address)
  }

  const handleDonate = async (caseData: Case) => {
    if (!userProfile?.address) {
      setError('Please connect your wallet first');
      return;
    }

    setSelectedCase(caseData);
    setShowDonationModal(true);
  };

  const handleDonationComplete = async (donationData: DonationData) => {
    try {
      // Update the case's amount raised
      const updatedCase = cases.find(c => c._id === selectedCase?._id);
      if (updatedCase) {
        updatedCase.amountRaised = (
          parseFloat(updatedCase.amountRaised) + 
          parseFloat(donationData.amount)
        ).toString();
      }

      // Add to donation history
      const newDonation: DonationHistory = {
        id: Date.now().toString(),
        welfare: selectedCase?.welfare || '',
        case: selectedCase?.title || '',
        amount: donationData.amount,
        amountUsd: (parseFloat(donationData.amount) * 2000).toString(), // Example conversion rate
        date: new Date().toISOString(),
        status: 'completed',
        txHash: donationData.txHash
      };

      setDonationHistory(prev => [newDonation, ...prev]);
      
      // Update donation stats
      setDonationStats(prev => ({
        ...prev,
        totalDonations: (parseFloat(prev.totalDonations) + parseFloat(donationData.amount)).toString(),
        totalCases: (parseInt(prev.totalCases) + 1).toString()
      }));

      // Show success message
      setSuccess('Donation processed successfully!');
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      console.error('Error updating donation:', error);
      setError('Failed to update donation information');
    }
  };

  const handleLogout = () => {
    if (typeof window !== "undefined") {
      // Comment out token removal for development
      // localStorage.removeItem("donorToken")
      router.push("/login")
    }
  }

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value)
  }

  const toggleFilter = () => {
    setFilterOpen(!filterOpen)
  }

  const applyFilter = (type: 'category' | 'status' | 'dateRange', value: string) => {
    setSelectedFilters({
      ...selectedFilters,
      [type]: value,
    })
  }

  // Add this function to save a welfare
  const saveWelfare = async (welfareId: string) => {
    try {
      setIsSavingWelfare(true)
      
      if (typeof window !== "undefined") {
        const token = localStorage.getItem("donorToken")
        if (!token) {
          return
        }

        // Save welfare via API
        const response = await fetch("http://localhost:5001/api/donor/save-welfare", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify({ welfareId })
        })

        if (!response.ok) {
          throw new Error("Failed to save welfare")
        }

        // Find the welfare in allWelfares and add it to savedWelfares
        const welfareToSave = allWelfares.find(w => w.id === welfareId)
        if (welfareToSave) {
          setSavedWelfares(prev => [...prev, welfareToSave])
          // Remove from allWelfares
          setAllWelfares(prev => prev.filter(w => w.id !== welfareId))
        }
      }
    } catch (error) {
      console.error("Error saving welfare:", error)
    } finally {
      setIsSavingWelfare(false)
    }
  }

  // Add this function to unsave a welfare
  const unsaveWelfare = async (welfareId: string) => {
    try {
      setIsSavingWelfare(true)
      
      if (typeof window !== "undefined") {
        const token = localStorage.getItem("donorToken")
        if (!token) {
          return
        }

        // Unsave welfare via API
        const response = await fetch(`http://localhost:5001/api/donor/unsave-welfare/${welfareId}`, {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`
          }
        })

        if (!response.ok) {
          throw new Error("Failed to unsave welfare")
        }

        // Find the welfare in savedWelfares and add it to allWelfares
        const welfareToUnsave = savedWelfares.find(w => w.id === welfareId)
        if (welfareToUnsave) {
          setAllWelfares(prev => [...prev, welfareToUnsave])
          // Remove from savedWelfares
          setSavedWelfares(prev => prev.filter(w => w.id !== welfareId))
        }
      }
    } catch (error) {
      console.error("Error unsaving welfare:", error)
    } finally {
      setIsSavingWelfare(false)
    }
  }

  // Add a new function to handle profile edit changes
  const handleProfileChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    field: string
  ) => {
    if (!userProfile) return
    
    if (field.startsWith("socialLinks.")) {
      const socialField = field.split(".")[1] as keyof UserProfile['socialLinks']
      setUserProfile({
        ...userProfile,
        socialLinks: {
          ...userProfile.socialLinks,
          [socialField]: e.target.value
        }
      })
    } else {
      setUserProfile({
        ...userProfile,
        [field as keyof UserProfile]: e.target.value
      })
    }
  }

  // Add a function to save profile changes
  const saveProfileChanges = async () => {
    if (!userProfile) return
    
    setIsSavingWelfare(true)
    
    try {
      if (typeof window !== "undefined") {
        const token = localStorage.getItem("donorToken")
        if (!token) return
        
        // Save profile via API
        const response = await fetch("http://localhost:5001/api/auth/update-profile", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify(userProfile)
        })
        
        if (!response.ok) {
          const errorData = await response.json()
          throw new Error(errorData.message || "Failed to update profile")
        }
        
        // Show success message
        setSuccess('Profile updated successfully!');
        setTimeout(() => setSuccess(''), 3000);
      }
    } catch (error) {
      console.error("Error updating profile:", error)
      setError(error instanceof Error ? error.message : "Failed to update profile")
    } finally {
      setIsSavingWelfare(false)
    }
  }

  const handleViewEmergency = async (emergency: Emergency) => {
    setSelectedEmergency(emergency)
    setViewEmergencyDialogOpen(true)
    
    // If the emergency is assigned to a welfare, fetch the welfare details
    if (emergency.status === "Assigned" || emergency.status === "In Progress") {
      try {
        const token = localStorage.getItem("donorToken")
        if (!token) return
        
        const response = await fetch(`http://localhost:5001/api/emergency/${emergency._id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
        
        if (response.ok) {
          const data = await response.json()
          if (data.assignedTo) {
            // Find this welfare in our saved welfares or all welfares
            const welfare = [...savedWelfares, ...allWelfares].find(w => w.id === data.assignedTo._id)
            if (welfare) {
              setEmergencyAssignedWelfare(welfare)
            } else {
              // Create a minimal welfare object from the response
              setEmergencyAssignedWelfare({
                id: data.assignedTo._id,
                name: data.assignedTo.name,
                description: "This welfare organization is handling this emergency case.",
                image: "/images/welfare-placeholder.jpg"
              })
            }
          }
        }
      } catch (error) {
        console.error("Error fetching emergency details:", error)
      }
    } else {
      setEmergencyAssignedWelfare(null)
    }
  }

  const handleAdoptionImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      const previews = Array.from(files).map(file => URL.createObjectURL(file))
      setAdoptionImagePreviews(previews)
      setNewAdoption(prev => ({ ...prev, images: Array.from(files) }))
    }
  }

  const fetchAdoptions = async () => {
    try {
      console.log('Fetching adoptions...');
      const token = localStorage.getItem('donorToken');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch('http://localhost:5001/api/adoption/all', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('API Error:', errorData);
        throw new Error(errorData.message || 'Failed to fetch adoptions');
      }
      
      const data = await response.json();
      console.log('Adoptions fetched successfully:', data);
      setAdoptions(data);
    } catch (error) {
      console.error('Error fetching adoptions:', error);
      setError(error.message || 'Failed to load adoptions');
    }
  };

  const handleAddAdoption = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('donorToken');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const formData = new FormData();
      formData.append('name', newAdoption.name);
      formData.append('type', newAdoption.type);
      formData.append('breed', newAdoption.breed);
      formData.append('age', newAdoption.age);
      formData.append('gender', newAdoption.gender);
      formData.append('size', newAdoption.size);
      formData.append('description', newAdoption.description);
      formData.append('location', newAdoption.location);
      formData.append('health', newAdoption.health);
      formData.append('behavior', newAdoption.behavior);
      formData.append('postedByType', 'donor');
      
      // Append each image file
      if (newAdoption.images && newAdoption.images.length > 0) {
        for (const file of newAdoption.images) {
          formData.append('images', file);
        }
      }

      const response = await fetch('http://localhost:5001/api/adoption', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to create adoption listing');
      }

      const data = await response.json();
      console.log('Adoption created successfully:', data);
      
      // Reset form state
      setNewAdoption({
        name: '',
        type: '',
        breed: '',
        age: '',
        gender: '',
        size: '',
        description: '',
        location: '',
        health: '',
        behavior: '',
        images: [],
      });
      setAdoptionImagePreviews([]);
      setShowAddAdoption(false);
      
      // Refresh adoptions list
      fetchAdoptions();
    } catch (error) {
      console.error('Error creating adoption:', error);
      setError(error instanceof Error ? error.message : 'Failed to create adoption listing');
    }
  };

  const handleAdopt = async (adoptionId: string) => {
    try {
      const token = localStorage.getItem('donorToken');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch(`http://localhost:5001/api/adoption/${adoptionId}/adopt`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to process adoption');
      }

      const updatedAdoption = await response.json();
      setAdoptions(adoptions.map(adoption => 
        adoption._id === adoptionId ? updatedAdoption : adoption
      ));
    } catch (error) {
      console.error('Error processing adoption:', error);
      setError(error instanceof Error ? error.message : 'Failed to process adoption');
    }
  };

  // Add this to your useEffect
  useEffect(() => {
    if (activeTab === 'adoptions') {
      fetchAdoptions();
    }
  }, [activeTab]);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-bold text-gray-900">Donor Dashboard</h1>
        </div>
      </header>

      {/* Success Message */}
      {success && (
        <div className="max-w-7xl mx-auto mt-4 px-4 sm:px-6 lg:px-8">
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
            <span className="block sm:inline">{success}</span>
          </div>
        </div>
      )}

      {/* Error Message */}
      {error && (
        <div className="max-w-7xl mx-auto mt-4 px-4 sm:px-6 lg:px-8">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        </div>
      )}

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Content goes here */}
      </main>
    </div>
  )
}
